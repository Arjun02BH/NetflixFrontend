name: Netflix Frontend Deployment

on:
  push:
    branches:
      - main

env:
  EC2_PUBLIC_IP_1: 18.199.191.210  # Instance 1 Public IP
  EC2_PUBLIC_IP_2: 3.126.246.114   # Instance 2 Public IP
  EC2_PUBLIC_IP_3: 35.159.60.165   # Instance 3 Public IP
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}  # Define the SSH private key in GitHub Secrets
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}        # GitHub Access Token for login

jobs:
  Deploy-Frontend:
    name: Deploy Frontend to EC2 Instances
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Docker on GitHub Action runner
      - name: Set up Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y ca-certificates curl gnupg lsb-release
          sudo mkdir -p /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/keyrings/docker.asc > /dev/null
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin

      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      # Step 4: Build and push Docker image to Docker Hub
      - name: Build and Push Docker image
        run: |
          docker build -t arjun02bh/netflixfrontend:v0.0.2 .
          docker push arjun02bh/netflixfrontend:v0.0.2

      # Step 5: SSH and Deploy to EC2 Instance 1
      - name: Deploy Frontend to EC2 Instance 1
        run: |
          echo "$SSH_PRIVATE_KEY" > aws_key.pem
          chmod 600 aws_key.pem
          ssh -o StrictHostKeyChecking=no -i aws_key.pem ec2-user@$EC2_PUBLIC_IP_1 \
          "sudo docker run -d -p 3000:3000 arjun02bh/netflixfrontend:v0.0.2"

      # Step 6: SSH and Deploy to EC2 Instance 2
      - name: Deploy Frontend to EC2 Instance 2
        run: |
          ssh -o StrictHostKeyChecking=no -i aws_key.pem ec2-user@$EC2_PUBLIC_IP_2 \
          "sudo docker run -d -p 3000:3000 arjun02bh/netflixfrontend:v0.0.2"

      # Step 7: SSH and Deploy to EC2 Instance 3
      - name: Deploy Frontend to EC2 Instance 3
        run: |
          ssh -o StrictHostKeyChecking=no -i aws_key.pem ec2-user@$EC2_PUBLIC_IP_3 \
          "sudo docker run -d -p 3000:3000 arjun02bh/netflixfrontend:v0.0.2"

      
      # Step 8: Deploy and Configure Nginx Load Balancer
      - name: Configure Nginx Load Balancer
        run: |
          ssh -o StrictHostKeyChecking=no -i aws_key.pem ec2-user@$EC2_PUBLIC_IP_1 \
          "sudo docker pull nginx:latest && \
          echo '
          events {
              worker_connections 1024;
          }
          http {
              upstream backend {
                  server $EC2_PUBLIC_IP_1:3000;
                  server $EC2_PUBLIC_IP_2:3000;
                  server $EC2_PUBLIC_IP_3:3000;
              }
              server {
                  listen 80;
                  location / {
                      proxy_pass http://backend;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto $scheme;
                  }
              }
          }' > nginx.conf && \
          sudo docker run -d -p 80:80 -v $(pwd)/nginx.conf:/etc/nginx/nginx.conf:ro nginx"
